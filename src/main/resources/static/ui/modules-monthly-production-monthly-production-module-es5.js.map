{"version":3,"sources":["src/app/modules/monthly-production/dialog-mp/dialog-mp.component.html","src/app/modules/monthly-production/monthly-production.component.html","src/app/modules/monthly-production/dialog-mp/dialog-mp.component.scss","src/app/modules/monthly-production/dialog-mp/dialog-mp.component.ts","src/app/modules/monthly-production/monthly-production.component.scss","src/app/modules/monthly-production/monthly-production.component.ts","src/app/modules/monthly-production/monthly-production.module.ts","src/app/modules/monthly-production/services/monthly-production.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"    <h1 mat-dialog-title>Số liệu sản xuất theo tháng</h1>\\r\\n    <div mat-dialog-content>\\r\\n        <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n            <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-label>Năm</mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"year\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"5\\\" fxFlex.xs=\\\"5\\\"></div>\\r\\n            <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-label>Tháng</mat-label>\\r\\n                    <mat-select  [(ngModel)]=\\\"month_value\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n                        <mat-option *ngFor=\\\"let m of month\\\" [value]=\\\"m\\\">\\r\\n                            {{m}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"5\\\" fxFlex.xs=\\\"5\\\"></div>\\r\\n            <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-label>Huyện/Thị xã</mat-label>\\r\\n                    <mat-select  [(ngModel)]=\\\"district_value\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n                        <mat-option *ngFor=\\\"let d of districtService.district$|async\\\" [value]=\\\"d.id\\\">\\r\\n                            {{d.name}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div mat-dialog-content>\\r\\n        <div [formGroup]=\\\"form\\\">\\r\\n            <div formArrayName=\\\"mProduction\\\" *ngFor=\\\"let control of mProductionControl.controls;index as i\\\">\\r\\n                <form class=\\\"example-form\\\" [formGroupName]=\\\"i\\\">\\r\\n                    <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n                        <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-label> Tên sản phẩm</mat-label>\\r\\n                                <mat-select formControlName=\\\"p_id\\\">\\r\\n                                    <mat-option *ngFor=\\\"let p of productService.products$ | async\\\" [value]=\\\"p.id\\\">\\r\\n                                        {{p.name}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div fxFlex=\\\"5\\\" fxFlex.xs=\\\"5\\\"></div>\\r\\n                        <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\">\\r\\n                            <mat-form-field >\\r\\n                                <mat-label>Kiểu dữ liệu</mat-label>\\r\\n                                <mat-select formControlName=\\\"t_d_id\\\">\\r\\n                                    <mat-option *ngFor=\\\"let t of typeDataSV.typeData$ | async\\\" [value]=\\\"t.id\\\">\\r\\n                                        {{t.name}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div fxFlex=\\\"5\\\" fxFlex.xs=\\\"5\\\"></div>\\r\\n                        <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\">\\r\\n                            <mat-form-field >\\r\\n                                <mat-label>Số liệu</mat-label>\\r\\n                                <input matInput formControlName=\\\"data\\\">\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <button mat-raised-button color=\\\"primary\\\" (click)=\\\"addMore()\\\">Thêm nhiều</button>\\r\\n    <div mat-dialog-actions>\\r\\n        <button mat-raised-button (click)=\\\"onNoClick()\\\">Hủy</button>\\r\\n        <button mat-raised-button (click)=\\\"submit()\\\">Xác nhận</button>\\r\\n    </div>\\r\\n\"","export default \"<button id=\\\"addNew\\\" mat-raised-button (click)=\\\"openDialog()\\\">Thêm mới</button>\\r\\n<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header card-header-primary\\\">\\r\\n        <h4 class=\\\"card-title\\\">Số liệu sản xuất theo tháng</h4>\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table mat-table [dataSource]=\\\"showMonthlyProduction\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n            <!-- Position Column -->\\r\\n            <ng-container matColumnDef=\\\"position\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> No. </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as i\\\"> {{i + 1}} </td>\\r\\n            </ng-container>\\r\\n\\r\\n            <!-- Code Column -->\\r\\n            <ng-container matColumnDef=\\\"month\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Tháng </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element;index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index==editIndex;else editInput\\\">\\r\\n                        <input type=\\\"text\\\" [(ngModel)]=\\\"currentMonthlyProduction.month\\\" />\\r\\n                    </ng-container>\\r\\n                    <ng-template #editInput>\\r\\n                        {{element.month}}\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <ng-container matColumnDef=\\\"years\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef>Năm </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                        <input type=\\\"text\\\" [(ngModel)]=\\\"currentMonthlyProduction.year\\\" />\\r\\n                    </ng-container>\\r\\n                    <ng-template #editInput>\\r\\n                        {{element.year}}\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <ng-container matColumnDef=\\\"district_id\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Huyện/Thị xã </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                        <mat-form-field>\\r\\n                            <mat-select [(ngModel)]=\\\"element.d_id\\\">\\r\\n                                <mat-option *ngFor=\\\"let d of districtService.district$ | async\\\" [value]=\\\"d.id\\\">\\r\\n                                    {{d.name}}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n                    </ng-container>\\r\\n                    <ng-template #editInput>\\r\\n                        {{element.district?.name}}\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <ng-container matColumnDef=\\\"product_id\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Tên sản phẩm</th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                        <mat-form-field>\\r\\n                            <mat-select [(ngModel)]=\\\"element.p_id\\\">\\r\\n                                <mat-option *ngFor=\\\"let p of productService.products$ | async\\\" [value]=\\\"p.id\\\">\\r\\n                                    {{p.name}}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n                    </ng-container>\\r\\n                    <ng-template #editInput>\\r\\n                        {{element?.products?.name}}\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <ng-container matColumnDef=\\\"type_data_id\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Kiểu dữ liệu </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                        <mat-form-field>\\r\\n                            <mat-select [(ngModel)]=\\\"element.t_d_id\\\">\\r\\n                                <mat-option *ngFor=\\\"let t of typeDataService.typeData$ | async\\\" [value]=\\\"t.id\\\">\\r\\n                                    {{t.name}}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n                    </ng-container>\\r\\n                    <ng-template #editInput>\\r\\n                        {{element.typeData?.name}}\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <ng-container matColumnDef=\\\"data\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Số liệu </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                        <input type=\\\"text\\\" [(ngModel)]=\\\"currentMonthlyProduction.data\\\" />\\r\\n                    </ng-container>\\r\\n                    <ng-template #editInput>\\r\\n                        {{element.data}}\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <ng-container matColumnDef=\\\"delete\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Thao tác </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index == editIndex; else acceptButton\\\">\\r\\n                        <button mat-raised-button (click)=\\\"updateData()\\\">Xác nhận</button>\\r\\n                        <button mat-raised-button (click)=\\\"cancelEdit()\\\">Hủy</button>\\r\\n                    </ng-container>\\r\\n                    <ng-template #acceptButton>\\r\\n                        <ng-container *ngIf=\\\"editIndex == null\\\">\\r\\n                            <button mat-raised-button (click)=\\\"toggleEdit(index, element)\\\">Sửa</button>\\r\\n                            <button mat-raised-button (click)=\\\"deleteData(element.id)\\\">Xóa</button>\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n        </table>\\r\\n        <mat-paginator [length]=\\\"monthlyProduction.length\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\"\\r\\n            (page)=\\\"onChangePage($event)\\\">\\r\\n        </mat-paginator>\\r\\n    </div>\\r\\n</div>\"","export default \"button {\\n  margin: 0.5rem;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL0FkbWluL3NyYy9hcHAvbW9kdWxlcy9tb250aGx5LXByb2R1Y3Rpb24vZGlhbG9nLW1wL0M6XFxVc2Vyc1xcS0lOR1xcRGVza3RvcFxcRWNvbm9taWMtU3RhdGlzdGljXFxlLXN0YXRpc3RpY3NcXFVJL3Byb2plY3RzXFxBZG1pblxcc3JjXFxhcHBcXG1vZHVsZXNcXG1vbnRobHktcHJvZHVjdGlvblxcZGlhbG9nLW1wXFxkaWFsb2ctbXAuY29tcG9uZW50LnNjc3MiLCJwcm9qZWN0cy9BZG1pbi9zcmMvYXBwL21vZHVsZXMvbW9udGhseS1wcm9kdWN0aW9uL2RpYWxvZy1tcC9kaWFsb2ctbXAuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFBO0FDQ0oiLCJmaWxlIjoicHJvamVjdHMvQWRtaW4vc3JjL2FwcC9tb2R1bGVzL21vbnRobHktcHJvZHVjdGlvbi9kaWFsb2ctbXAvZGlhbG9nLW1wLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYnV0dG9ue1xyXG4gICAgbWFyZ2luOiAwLjVyZW07XHJcbn1cclxuIiwiYnV0dG9uIHtcbiAgbWFyZ2luOiAwLjVyZW07XG59Il19 */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { MonthlyProduction } from '../../../models/monthly-production';\r\nimport { MonthlyProductionService } from '../services/monthly-production.service';\r\nimport { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';\r\nimport { TypeDataService } from '../../type-data/services/type-data.service';\r\nimport { ProductService } from '../../products/services/product.service';\r\nimport { QuanHuyenService } from '../../quan-huyen/services/quan-huyen.service';\r\n\r\n@Component({\r\n  selector: 'app-dialog-mp',\r\n  templateUrl: './dialog-mp.component.html',\r\n  styleUrls: ['./dialog-mp.component.scss']\r\n})\r\nexport class DialogMPComponent implements OnInit {\r\n  form: FormGroup\r\n  constructor(public dialogRef: MatDialogRef<DialogMPComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: MonthlyProduction,\r\n    public mPSV: MonthlyProductionService, private formBuilder: FormBuilder,\r\n    public typeDataSV:TypeDataService,\r\n    public productService:ProductService,\r\n    public districtService:QuanHuyenService\r\n  ) { }\r\n  month:any=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"];\r\n  year:any=null;\r\n  month_value:any=null;\r\n  district_value:any=null;\r\n  ngOnInit() {\r\n    this.form = this.formBuilder.group({\r\n      mProduction:this.formBuilder.array([])\r\n    })\r\n    this.addMore();\r\n  }\r\n  get mProductionControl(){\r\n    return this.form.controls.mProduction as FormArray;\r\n  }\r\n  addMore(){\r\n    this.mProductionControl.push(this.formBuilder.group({\r\n      month: ['',[Validators.required]],\r\n      year: ['',[Validators.required]],\r\n      data: ['',[Validators.required]],\r\n      p_id:['',[Validators.required]],\r\n      t_d_id:['',[Validators.required]],\r\n      d_id:['',[Validators.required]]\r\n    }))\r\n  }\r\n  onNoClick() {\r\n    this.dialogRef.close();\r\n  }\r\n  submit() {\r\n    const {mProduction} = this.form.value;\r\n    const newMProduction=mProduction.map(\r\n      e =>{\r\n        return{\r\n          ...e,\r\n          month:this.month_value,\r\n          year:this.year,\r\n          d_id:this.district_value\r\n        }\r\n      \r\n    })\r\n    this.mPSV.add(newMProduction);\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9BZG1pbi9zcmMvYXBwL21vZHVsZXMvbW9udGhseS1wcm9kdWN0aW9uL21vbnRobHktcHJvZHVjdGlvbi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { MonthlyProduction } from '../../models/monthly-production';\r\nimport { MatDialog, PageEvent } from '@angular/material';\r\nimport { DialogMPComponent } from './dialog-mp/dialog-mp.component';\r\nimport { MonthlyProductionService } from './services/monthly-production.service';\r\nimport { ConfirmDialogService } from '../../@lib/services/confirm-dialog.service';\r\nimport { TypeDataService } from '../type-data/services/type-data.service';\r\nimport { ProductService } from '../products/services/product.service';\r\nimport { QuanHuyenService } from '../quan-huyen/services/quan-huyen.service';\r\n\r\n@Component({\r\n  selector: 'app-monthly-production',\r\n  templateUrl: './monthly-production.component.html',\r\n  styleUrls: ['./monthly-production.component.scss']\r\n})\r\n\r\nexport class MonthlyProductionComponent implements OnInit {\r\n  displayedColumns: string[] = [\"position\", \"month\", \"years\", \"district_id\", \"product_id\", \"type_data_id\", \"data\", \"delete\"]\r\n  monthlyProduction: MonthlyProduction[] = null;\r\n  showMonthlyProduction: MonthlyProduction[] = null;\r\n  currentMonthlyProduction: MonthlyProduction = null;\r\n  oldMonthlyProduction: MonthlyProduction = null;\r\n  editIndex = null;\r\n  pageSize = 5\r\n  pageSizeOptions = [2, 5, 10, 25]\r\n  pageEvent: PageEvent\r\n  length = 1000\r\n  constructor(private dialog: MatDialog,\r\n    public mPSV: MonthlyProductionService,\r\n    private confirmDialog: ConfirmDialogService,\r\n    public typeDataService: TypeDataService,\r\n    public productService: ProductService,\r\n    public districtService:QuanHuyenService) { }\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(DialogMPComponent, {\r\n      data: { monthlyProduction: this.monthlyProduction }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.mPSV.monthlyProduction$.subscribe(l => {\r\n      this.monthlyProduction = l\r\n      const { pageSize, } = this\r\n      this.onChangePage({\r\n        length: this.monthlyProduction.length,\r\n        pageSize,\r\n        pageIndex: 0,\r\n        previousPageIndex: null\r\n      })\r\n    })\r\n  }\r\n  toggleEdit(index: number, monthlyProduction: MonthlyProduction) {\r\n    this.currentMonthlyProduction = monthlyProduction;\r\n    console.log(this.currentMonthlyProduction);\r\n    this.editIndex = index;\r\n    this.oldMonthlyProduction = { ...monthlyProduction };\r\n  }\r\n  cancelEdit() {\r\n    this.currentMonthlyProduction.month = this.oldMonthlyProduction.month;\r\n    this.currentMonthlyProduction.year = this.oldMonthlyProduction.year;\r\n    this.currentMonthlyProduction.t_d_id = this.oldMonthlyProduction.t_d_id;\r\n    this.currentMonthlyProduction.d_id = this.oldMonthlyProduction.d_id;\r\n    this.currentMonthlyProduction.data = this.oldMonthlyProduction.data;\r\n    this.currentMonthlyProduction.p_id = this.oldMonthlyProduction.p_id;\r\n    this.editIndex = this.currentMonthlyProduction = null;\r\n  }\r\n  updateData() {\r\n    console.log(this.currentMonthlyProduction)\r\n    this.mPSV.update(this.currentMonthlyProduction).subscribe(\r\n      _ => this.currentMonthlyProduction = this.editIndex = null\r\n    )\r\n  }\r\n  deleteData(id: number) {\r\n    this.confirmDialog.show().then(\r\n      res => {\r\n        if (res) {\r\n          this.mPSV.delete(id);\r\n        }\r\n      }\r\n    )\r\n  }\r\n  onChangePage({ length,\r\n    pageIndex,\r\n    pageSize,\r\n    previousPageIndex }) {\r\n    console.log(length,\r\n      pageIndex,\r\n      pageSize,\r\n      previousPageIndex)\r\n    this.showMonthlyProduction = Object.keys(this.monthlyProduction).map(mP => this.monthlyProduction[mP]).slice(pageIndex * pageSize, pageIndex * pageSize + pageSize)\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MonthlyProductionComponent } from './monthly-production.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MatTableModule, MatTabsModule, MatInputModule, MatFormFieldModule, MatDialogModule, MatButtonModule, MatSelectModule, MatSortModule, MatPaginatorModule } from '@angular/material';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { LibModule } from '../../@lib/lib.module';\r\nimport { MonthlyProductionService } from './services/monthly-production.service';\r\nimport { DialogMPComponent } from './dialog-mp/dialog-mp.component';\r\n\r\nconst ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: MonthlyProductionComponent,\r\n    children: []\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [MonthlyProductionComponent, DialogMPComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(ROUTES),\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatSortModule,\r\n    LibModule,\r\n    MatPaginatorModule\r\n  ],\r\n \r\n  entryComponents:[DialogMPComponent]\r\n})\r\nexport class MonthlyProductionModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { MonthlyProduction } from '../../../models/monthly-production';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { tap } from 'rxjs/operators';\r\nimport { TypeDataService } from '../../type-data/services/type-data.service';\r\nimport { ProductService } from '../../products/services/product.service';\r\nimport { ProductLineService } from '../../product-line/services/product-line.service';\r\nimport { QuanHuyenService } from '../../quan-huyen/services/quan-huyen.service';\r\n\r\n@Injectable({\r\n  providedIn:\"root\"\r\n})\r\nexport class MonthlyProductionService {\r\n  monthlyProductionsSubject = new BehaviorSubject<MonthlyProduction[]>([])\r\n\r\n  get monthlyProduction$() {\r\n    return this.monthlyProductionsSubject.asObservable()\r\n  }\r\n\r\n  constructor(private http: HttpClient,\r\n     private t_dSV: TypeDataService,\r\n     private productSV: ProductService,\r\n     private districtService:QuanHuyenService\r\n  ) {\r\n    this.getList()\r\n  }\r\n\r\n  getList() {\r\n    this.http.get(\"monthly-production\").subscribe(\r\n      (res: any) => this.monthlyProductionsSubject.next(res)\r\n    )\r\n  }\r\n  add(mProduction: MonthlyProduction[]) {\r\n    this.http.post(\"monthly-production\", mProduction).subscribe(\r\n      (res: any) => {\r\n        res.map(\r\n          e => {\r\n            const newList = [e, ...this.monthlyProductionsSubject.value]\r\n            this.monthlyProductionsSubject.next(newList)\r\n\r\n          }\r\n        )\r\n      }\r\n    )\r\n  }\r\n  update(monthlyProduction: MonthlyProduction) {\r\n    return this.http.patch(\"monthly-production\", monthlyProduction).pipe(\r\n      tap(\r\n        res => {\r\n          const { value } = this.monthlyProductionsSubject\r\n          const index = value.findIndex(e => e.id == monthlyProduction.id)\r\n          const newList = { ...value }\r\n          newList[index] = monthlyProduction\r\n          this.t_dSV.typeData$.subscribe(\r\n            typeDataList => {\r\n              const tL = typeDataList.find(e => e.id == monthlyProduction.t_d_id)\r\n              monthlyProduction.typeData = tL\r\n            }\r\n          )\r\n          this.productSV.products$.subscribe(\r\n            productList => {\r\n              const pL = productList.find(e => e.id == monthlyProduction.p_id)\r\n              monthlyProduction.products = pL\r\n            }\r\n          )\r\n           this.districtService.district$.subscribe(\r\n            productList => {\r\n              const dL = productList.find(e => e.id == monthlyProduction.d_id)\r\n              monthlyProduction.district = dL\r\n            }\r\n          )\r\n          this.monthlyProductionsSubject.next(newList)\r\n        }\r\n      )\r\n    )\r\n  }\r\n  delete(id: number) {\r\n    this.http.delete(\"monthly-production/\" + id).subscribe(\r\n      res => {\r\n        const { value } = this.monthlyProductionsSubject\r\n        const newList = value.filter(e => e.id != id)\r\n        this.monthlyProductionsSubject.next(newList)\r\n      }\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"modules-monthly-production-monthly-production-module-es5.js"}