{"version":3,"sources":["./src/app/modules/type-data/services/type-data.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAA2C;AACO;AACX;AAEF;AAIrC,IAAa,eAAe,GAA5B,MAAa,eAAe;IAK1B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAJpC,oBAAe,GAAG,IAAI,oDAAe,CAAa,EAAE,CAAC;QAKnD,IAAI,CAAC,OAAO,EAAE,CAAC;IACjB,CAAC;IALD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;IAC7C,CAAC;IAKD,OAAO;QACL,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,SAAS,CAClC,CAAC,GAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,CAC7C;IACH,CAAC;IACD,GAAG,CAAC,QAAoB;QACtB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,SAAS,CAC7C,CAAC,GAAQ,EAAE,EAAE;YACX,GAAG,CAAC,GAAG,CACL,CAAC,CAAC,EAAE;gBACF,MAAM,OAAO,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;gBACnD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;YACpC,CAAC,CACF;QACH,CAAC,CACF;IACH,CAAC;IACD,MAAM,CAAC,QAAkB;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,IAAI,CAChD,0DAAG,CACD,CAAC,GAAQ,EAAE,EAAE;YACX,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,eAAe;YACtC,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,QAAQ,CAAC,EAAE,CAAC;YACvD,MAAM,OAAO,GAAG,CAAC,GAAG,KAAK,CAAC;YAC1B,OAAO,CAAC,KAAK,CAAC,GAAG,QAAQ;YACzB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;QACpC,CAAC,CACF,CACF;IACH,CAAC;IACD,MAAM,CAAC,EAAU;QACf,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC,CAAC,SAAS,CAC3C,CAAC,GAAQ,EAAE,EAAE;YACX,MAAM,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,eAAe;YACtC,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC;YAC7C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;QACpC,CAAC,CACF;IACH,CAAC;CACF;;YA3C2B,+DAAU;;AALzB,eAAe;IAH3B,gEAAU,CAAC;QACV,UAAU,EAAC,MAAM;KAClB,CAAC;GACW,eAAe,CAgD3B;AAhD2B","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { TypeData } from '../../../models/type-data';\r\nimport { tap } from 'rxjs/operators';\r\n@Injectable({\r\n  providedIn:\"root\"\r\n})\r\nexport class TypeDataService {\r\n  typeDataSubject = new BehaviorSubject<TypeData[]>([])\r\n  get typeData$() {\r\n    return this.typeDataSubject.asObservable();\r\n  }\r\n  constructor(private http: HttpClient) {\r\n    this.getList();\r\n  }\r\n\r\n  getList() {\r\n    this.http.get(\"type-data\").subscribe(\r\n      (res: any) => this.typeDataSubject.next(res)\r\n    )\r\n  }\r\n  add(typeData: TypeData[]) {\r\n    this.http.post(\"type-data\", typeData).subscribe(\r\n      (res: any) => {\r\n        res.map(\r\n          e => {\r\n            const newList = [e, ...this.typeDataSubject.value];\r\n            this.typeDataSubject.next(newList)\r\n          }\r\n        )\r\n      }\r\n    )\r\n  }\r\n  update(typeData: TypeData) {\r\n    return this.http.patch(\"type-data\", typeData).pipe(\r\n      tap(\r\n        (res: any) => {\r\n          const { value } = this.typeDataSubject\r\n          const index = value.findIndex(e => e.id == typeData.id)\r\n          const newList = [...value]\r\n          newList[index] = typeData\r\n          this.typeDataSubject.next(newList)\r\n        }\r\n      )\r\n    )\r\n  }\r\n  delete(id: number) {\r\n    this.http.delete(\"type-data/\" + id).subscribe(\r\n      (res: any) => {\r\n        const { value } = this.typeDataSubject\r\n        const newList = value.filter(e => e.id != id)\r\n        this.typeDataSubject.next(newList)\r\n      }\r\n    )\r\n  }\r\n}"],"sourceRoot":"webpack:///"}