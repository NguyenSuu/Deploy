{"version":3,"sources":["src/app/modules/product-line/dialog/dialog.component.html","src/app/modules/product-line/product-line.component.html","src/app/@lib/components/confirm/confirm.component.ts","src/app/@lib/lib.module.ts","src/app/@lib/services/confirm-dialog.service.ts","src/app/modules/fields/services/fields.service.ts","src/app/modules/product-line/dialog/dialog.component.scss","src/app/modules/product-line/dialog/dialog.component.ts","src/app/modules/product-line/product-line.component.scss","src/app/modules/product-line/product-line.component.ts","src/app/modules/product-line/product-line.module.ts","src/app/modules/product-line/services/product-line.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<h1 mat-dialog-title>Thêm mói dòng sản phẩm</h1>\\r\\n<div mat-dialog-content>\\r\\n    <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n        <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\"></div>\\r\\n        <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\">\\r\\n            <mat-form-field>\\r\\n                <mat-label>Tên ngành</mat-label>\\r\\n                <mat-select [(ngModel)]=\\\"field_id\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n                    <mat-option *ngFor=\\\"let f of fieldService.fields$ | async\\\" [value]=\\\"f.id\\\">\\r\\n                        {{ f.name}}\\r\\n                    </mat-option>\\r\\n                </mat-select>\\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\"></div>\\r\\n    </div>\\r\\n</div>\\r\\n<div mat-dialog-content>\\r\\n    <div [formGroup]=\\\"form\\\">\\r\\n        <div formArrayName=\\\"productLines\\\" *ngFor=\\\"let control of productLinesControl.controls;index as i\\\">\\r\\n            <form class=\\\"example-form\\\" [formGroupName]=\\\"i\\\">\\r\\n                <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n                    <div fxFlex=\\\"50\\\" fxFlex.xs=\\\"50\\\">\\r\\n                        <mat-form-field>\\r\\n                            <mat-label>Tên dòng sản phẩm</mat-label>\\r\\n                            <input matInput formControlName=\\\"name\\\" placeholder=\\\"Thực phẩm\\\">\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                    <div fxFlex=\\\"5\\\" fxFlex.xs=\\\"5\\\"></div>\\r\\n                    <div fxFlex=\\\"40\\\" fxFlex.xs=\\\"40\\\">\\r\\n                        <mat-form-field>\\r\\n                            <mat-label>Mã dòng sản phẩm</mat-label>\\r\\n                            <input matInput formControlName=\\\"code\\\" placeholder=\\\"01\\\">\\r\\n                        </mat-form-field>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </form>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<button mat-raised-button color=\\\"primary\\\" (click)=\\\"addMore()\\\">Thêm nhiều</button>\\r\\n<div mat-dialog-actions>\\r\\n    <button mat-raised-button (click)=\\\"onNoClick()\\\">Hủy</button>\\r\\n    <button mat-raised-button (click)=\\\"submit()\\\">Xác nhận</button>\\r\\n</div>\"","export default \"<button id=\\\"addNew\\\" mat-raised-button (click)=\\\"openDialog()\\\">Thêm mới</button>\\r\\n<div class=\\\"card\\\">\\r\\n    <div class=\\\"card-header card-header-primary\\\">\\r\\n        <h4 class=\\\"card-title\\\">Dòng sản phẩm</h4>\\r\\n    </div>\\r\\n    <div class=\\\"card-body\\\">\\r\\n        <table mat-table [dataSource]=\\\"showProductLines\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n            <!-- Position Column -->\\r\\n            <ng-container matColumnDef=\\\"position\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> No. </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as i\\\"> {{i + 1}} </td>\\r\\n            </ng-container>\\r\\n\\r\\n            <!-- Code Column -->\\r\\n            <ng-container matColumnDef=\\\"code\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Mã dòng sản phẩm </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element;index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index==editIndex;else editInput\\\">\\r\\n                        <input type=\\\"text\\\" [(ngModel)]=\\\"currentProductLine.code\\\" />\\r\\n                    </ng-container>\\r\\n                    <ng-template #editInput>\\r\\n                        {{element.code}}\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n\\r\\n            <!-- Name Column -->\\r\\n            <ng-container matColumnDef=\\\"name\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Tên dòng sản phẩm </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                        <input type=\\\"text\\\" [(ngModel)]=\\\"currentProductLine.name\\\" />\\r\\n                    </ng-container>\\r\\n                    <ng-template #editInput>\\r\\n                        {{element.name}}\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <ng-container matColumnDef=\\\"fields\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Tên ngành</th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                        <mat-form-field>\\r\\n                            <mat-select [(ngModel)]=\\\"element.f_id\\\">\\r\\n                                <mat-option *ngFor=\\\"let f of fieldsService.fields$ | async\\\" [value]=\\\"f.id\\\">\\r\\n                                    {{ f.name }}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                        </mat-form-field>\\r\\n                    </ng-container>\\r\\n                    <ng-template #editInput>\\r\\n                        {{element?.field?.name}}\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <!-- End Fields Column -->\\r\\n\\r\\n            <ng-container matColumnDef=\\\"delete\\\">\\r\\n                <th mat-header-cell *matHeaderCellDef> Thao tác </th>\\r\\n                <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                    <ng-container *ngIf=\\\"index == editIndex; else acceptButton\\\">\\r\\n                        <button mat-raised-button (click)=\\\"updateProduct()\\\">Xác nhận</button>\\r\\n                        <button mat-raised-button (click)=\\\"cancelEdit()\\\">Hủy</button>\\r\\n                    </ng-container>\\r\\n                    <ng-template #acceptButton>\\r\\n                        <ng-container *ngIf=\\\"editIndex == null\\\">\\r\\n                            <button mat-raised-button (click)=\\\"toggleEdit(index, element)\\\">Sửa</button>\\r\\n                            <button mat-raised-button (click)=\\\"deleteProductLine(element.id)\\\">Xóa</button>\\r\\n                        </ng-container>\\r\\n                    </ng-template>\\r\\n                </td>\\r\\n            </ng-container>\\r\\n            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n        </table>\\r\\n        <mat-paginator [length]=\\\"productLines.length\\\" [pageSize]=\\\"pageSize\\\" [pageSizeOptions]=\\\"pageSizeOptions\\\"\\r\\n        (page)=\\\"onChangePage($event)\\\">\\r\\n    </mat-paginator>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-confirm',\r\n  template: `\r\n    <p>\r\n      {{ data.message }}\r\n    </p>\r\n\r\n    <div>\r\n      <button mat-button (click)=\"confirm()\">Có</button>\r\n\r\n      <button mat-button (click)=\"onNoClick()\" >Hủy</button>\r\n    </div>\r\n  `,\r\n  styles: []\r\n})\r\nexport class ConfirmComponent {\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public data: any, private dialogRef: MatDialogRef<ConfirmComponent>) { }\r\n\r\n  confirm() {\r\n    this.dialogRef.close(true)\r\n  }\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ConfirmComponent } from './components/confirm/confirm.component';\r\nimport { ConfirmDialogService } from './services/confirm-dialog.service';\r\nimport { MatButtonModule, MatDialogModule } from '@angular/material';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ConfirmComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule\r\n  ],\r\n  providers: [\r\n    ConfirmDialogService\r\n  ],\r\n  entryComponents: [\r\n    ConfirmComponent\r\n  ]\r\n})\r\nexport class LibModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material';\r\nimport { ConfirmComponent } from '../components/confirm/confirm.component';\r\n\r\n@Injectable()\r\nexport class ConfirmDialogService {\r\n\r\n  constructor(private dialog: MatDialog) { }\r\n\r\n  async show(message = \"Xác nhận\"): Promise<boolean> {\r\n    let dialogRef = this.dialog.open(ConfirmComponent, {\r\n      data: { message },\r\n    })\r\n\r\n    const result: boolean  = await dialogRef.afterClosed().toPromise();\r\n\r\n    return new Promise(\r\n      (res, rej) => {\r\n        if (result) {\r\n          res(true)\r\n          \r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Fields } from '../../../models/field';\r\n\r\n@Injectable({\r\n  providedIn:\"root\"\r\n})\r\n\r\nexport class FieldsService {\r\n  fieldsSubject = new BehaviorSubject<Fields[]>([]);\r\n\r\n  get fields$() {\r\n    return this.fieldsSubject.asObservable();\r\n  }\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    this.getList();\r\n  }\r\n  \r\n  getList() {\r\n    this.httpClient.get(\"fields\").subscribe(\r\n      (res: any) => this.fieldsSubject.next(res)\r\n    )\r\n  }\r\n\r\n  delete(id: number) {\r\n    this.httpClient.delete('fields/' + id).subscribe(\r\n      (res: any) => {\r\n        const { value } = this.fieldsSubject\r\n        const newList = value.filter(e => e.id != id)\r\n        this.fieldsSubject.next(newList)\r\n      }\r\n    )\r\n  }\r\n\r\n  update(field: Fields) {\r\n    return this.httpClient.patch(\"fields\", field).pipe(\r\n      tap(\r\n        (res: any) => {\r\n          const { value } = this.fieldsSubject\r\n\r\n          const index = value.findIndex(e => e.id == field.id)\r\n\r\n          const newList = [...value]\r\n\r\n          newList[index] = field;\r\n\r\n          this.fieldsSubject.next(newList)\r\n        }\r\n      )\r\n    )\r\n  }\r\n\r\n  addField(field: Fields[]) {\r\n    this.httpClient.post(\"fields\", field).subscribe(\r\n      (res: any) => {\r\n        const newList = [...res, ...this.fieldsSubject.value];\r\n        {\r\n          this.fieldsSubject.next(newList);\r\n        }\r\n      }\r\n    )\r\n  };\r\n}\r\n","export default \"button {\\n  margin: 0.5rem;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL0FkbWluL3NyYy9hcHAvbW9kdWxlcy9wcm9kdWN0LWxpbmUvZGlhbG9nL0M6XFxVc2Vyc1xcS0lOR1xcRGVza3RvcFxcRWNvbm9taWMtU3RhdGlzdGljXFxlLXN0YXRpc3RpY3NcXFVJL3Byb2plY3RzXFxBZG1pblxcc3JjXFxhcHBcXG1vZHVsZXNcXHByb2R1Y3QtbGluZVxcZGlhbG9nXFxkaWFsb2cuY29tcG9uZW50LnNjc3MiLCJwcm9qZWN0cy9BZG1pbi9zcmMvYXBwL21vZHVsZXMvcHJvZHVjdC1saW5lL2RpYWxvZy9kaWFsb2cuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFBO0FDQ0oiLCJmaWxlIjoicHJvamVjdHMvQWRtaW4vc3JjL2FwcC9tb2R1bGVzL3Byb2R1Y3QtbGluZS9kaWFsb2cvZGlhbG9nLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiYnV0dG9ue1xyXG4gICAgbWFyZ2luOiAwLjVyZW07XHJcbn0iLCJidXR0b24ge1xuICBtYXJnaW46IDAuNXJlbTtcbn0iXX0= */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ProductLine } from '../../../models/product-line';\r\nimport { ProductLineService } from '../services/product-line.service';\r\nimport { FieldsService } from '../../fields/services/fields.service';\r\n\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss']\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  constructor(public dialogRef: MatDialogRef<DialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ProductLine,\r\n    public pLSv: ProductLineService,\r\n    private formBuilder: FormBuilder,\r\n    public fieldService: FieldsService\r\n  ) { }\r\n  field_id: any = null;\r\n  onNoClick(): void {\r\n    this.dialogRef.close({\r\n\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = this.formBuilder.group({\r\n      productLines: this.formBuilder.array([])\r\n\r\n    })\r\n    this.addMore();\r\n  }\r\n  get productLinesControl() {\r\n    return this.form.controls.productLines as FormArray;\r\n  }\r\n  addMore() {\r\n    this.productLinesControl.push(this.formBuilder.group({\r\n      name: ['',[Validators.required]],\r\n      code: ['',[Validators.required]],\r\n      f_id: ['',[Validators.required]]\r\n    }))\r\n  }\r\n  submit() {\r\n    const {productLines} = this.form.value;\r\n    const newProductLines = productLines.map(\r\n      e => {\r\n        return {\r\n          ...e,\r\n          f_id: this.field_id\r\n        }\r\n      }\r\n    )\r\n    \r\n    this.pLSv.add(newProductLines);\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9BZG1pbi9zcmMvYXBwL21vZHVsZXMvcHJvZHVjdC1saW5lL3Byb2R1Y3QtbGluZS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ProductLine } from '../../models/product-line';\r\nimport { ProductLineService } from './services/product-line.service';\r\nimport { MatDialog, PageEvent } from '@angular/material';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { ConfirmDialogService } from '../../@lib/services/confirm-dialog.service';\r\nimport { FieldsService } from '../fields/services/fields.service';\r\n\r\n@Component({\r\n  selector: 'app-product-line',\r\n  templateUrl: './product-line.component.html',\r\n  styleUrls: ['./product-line.component.scss']\r\n})\r\nexport class ProductLineComponent implements OnInit {\r\n  displayedColumns: string[] = ['position', 'code', 'name', 'fields', 'delete']\r\n\r\n  productLines: ProductLine[] = null;\r\n  showProductLines: ProductLine[] = null;\r\n  pageSize = 5\r\n  pageSizeOptions = [2, 5, 10, 25]\r\n  pageEvent: PageEvent\r\n  length = 1000\r\n  editIndex = null;\r\n  currentProductLine: ProductLine = null;\r\n  oldProductLine: ProductLine = null;\r\n\r\n  constructor(public pLSv: ProductLineService,\r\n    public dialog: MatDialog,\r\n    private confirmDialog: ConfirmDialogService,\r\n    public fieldsService: FieldsService,\r\n  ) { }\r\n\r\n  updateProduct() {\r\n    this.pLSv.update(this.currentProductLine).subscribe(\r\n      _ => this.currentProductLine = this.editIndex = null\r\n    )\r\n  }\r\n\r\n  deleteProductLine(id: number) {\r\n    this.confirmDialog.show().then(\r\n      res => {\r\n        if (res) {\r\n          this.pLSv.delete(id);\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(DialogComponent, {\r\n      data: { product: this.productLines }\r\n    });\r\n  }\r\n\r\n  cancelEdit() {\r\n    this.currentProductLine.code = this.oldProductLine.code;\r\n    this.currentProductLine.name = this.oldProductLine.name;\r\n    this.editIndex = this.currentProductLine = null;\r\n  }\r\n\r\n  toggleEdit(index: number, productLine: ProductLine) {\r\n    this.editIndex = index;\r\n    this.currentProductLine = productLine;\r\n    this.oldProductLine = { ...productLine };\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.pLSv.getList()\r\n    this.pLSv.productLine$.subscribe(l => {\r\n      this.productLines = l\r\n      const { pageSize, } = this\r\n      this.onChangePage({\r\n        length: this.productLines.length,\r\n        pageSize,\r\n        pageIndex: 0,\r\n        previousPageIndex: null\r\n      })\r\n    })\r\n  }\r\n  onChangePage({ length,\r\n    pageIndex,\r\n    pageSize,\r\n    previousPageIndex }) {\r\n    console.log(length,\r\n      pageIndex,\r\n      pageSize,\r\n      previousPageIndex)\r\n    this.showProductLines = [...this.productLines].slice(pageIndex * pageSize, pageIndex * pageSize + pageSize)\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProductLineComponent } from './product-line.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {  MatTableModule, MatInputModule, MatTabsModule, MatFormFieldModule, MatDialogModule, MatButtonModule, MatSelectModule, MatSortModule, MatPaginatorModule } from '@angular/material';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ProductLineService } from './services/product-line.service';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { LibModule } from '../../@lib/lib.module';\r\n\r\nconst ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProductLineComponent,\r\n    children: []\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [ProductLineComponent, DialogComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(ROUTES),\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatSortModule,\r\n    LibModule,\r\n    MatPaginatorModule\r\n  ],\r\n  entryComponents:[DialogComponent]\r\n})\r\nexport class ProductLineModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { ProductLine } from '../../../models/product-line';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Fields } from '../../../models/field';\r\nimport { tap, map, distinct } from 'rxjs/operators';\r\nimport { ConfirmDialogService } from '../../../@lib/services/confirm-dialog.service';\r\nimport { FieldsService } from '../../fields/services/fields.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProductLineService {\r\n  private productLineSubject = new BehaviorSubject<ProductLine[]>([]);\r\n\r\n  constructor(private httpClient: HttpClient, private fieldSV: FieldsService) {\r\n    this.getList();\r\n  }\r\n\r\n  get productLine$() {\r\n    return this.productLineSubject.asObservable();\r\n  }\r\n\r\n  add(products: ProductLine[]) {\r\n    this.httpClient.post(\"product-line\", products).subscribe(\r\n      (res: any) => {\r\n        res.map(e => {\r\n          const newList = [e, ...this.productLineSubject.value];\r\n          this.productLineSubject.next(newList);\r\n        }\r\n        )\r\n      }\r\n    )\r\n  }\r\n\r\n  delete(id: number) {\r\n    this.httpClient.delete(\"product-line/\" + id).subscribe(\r\n      (res: any) => {\r\n        const { value } = this.productLineSubject\r\n        const newList = value.filter(e => e.id != id)\r\n        this.productLineSubject.next(newList)\r\n      }\r\n    )\r\n  }\r\n\r\n  update(productL: ProductLine) {\r\n    return this.httpClient.patch(\"product-line\", productL).pipe(\r\n      tap(\r\n        (res: any) => {\r\n          const { value } = this.productLineSubject;\r\n\r\n          const index = value.findIndex(e => e.id == productL.id);\r\n\r\n          let newList: any = [...value];\r\n\r\n          newList[index] = productL;\r\n\r\n          this.fieldSV.fields$.subscribe(\r\n\r\n            fieldList => {\r\n            \r\n              const fL = fieldList.find(e => e.id == productL.f_id)\r\n            \r\n              productL.field = fL;\r\n            \r\n            }\r\n          );\r\n          this.productLineSubject.next(newList);\r\n        }\r\n      )\r\n    )\r\n  }\r\n\r\n  getList() {\r\n    this.httpClient.get(\"product-line\").subscribe(\r\n      (res: any) => this.productLineSubject.next(res))\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"modules-product-line-product-line-module-es5.js"}