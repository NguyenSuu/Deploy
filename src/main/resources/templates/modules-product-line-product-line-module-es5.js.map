{"version":3,"sources":["src/app/modules/product-line/dialog/dialog.component.html","src/app/modules/product-line/product-line.component.html","src/app/modules/product-line/dialog/dialog.component.scss","src/app/modules/product-line/dialog/dialog.component.ts","src/app/modules/product-line/product-line.component.scss","src/app/modules/product-line/product-line.component.ts","src/app/modules/product-line/product-line.module.ts","src/app/modules/product-line/services/product-line.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<form class=\\\"example-form\\\">\\r\\n    <h1 mat-dialog-title>Dòng sản phẩm</h1>\\r\\n    <div mat-dialog-content>\\r\\n        <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n            <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\"></div>\\r\\n            <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-label>Tên ngành</mat-label>\\r\\n                    <mat-select [(ngModel)]=\\\"field_id\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n                        <mat-option *ngFor=\\\"let f of pLSv.fields$ | async\\\" [value]=\\\"f.id\\\">\\r\\n                            {{ f.name}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div mat-dialog-content>\\r\\n        <div [formGroup]=\\\"form\\\">\\r\\n            <div formArrayName=\\\"productLines\\\" *ngFor=\\\"let control of productLinesControl.controls;index as i\\\">\\r\\n                <form class=\\\"example-form\\\" [formGroupName]=\\\"i\\\">\\r\\n                    <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n                        <div fxFlex=\\\"50\\\" fxFlex.xs=\\\"50\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-label>Tên dòng sản phẩm</mat-label>\\r\\n                                <input matInput formControlName=\\\"name\\\" placeholder=\\\"Thực phẩm\\\">\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div fxFlex=\\\"50\\\" fxFlex.xs=\\\"50\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-label>Mã dòng sản phẩm</mat-label>\\r\\n                                <input matInput formControlName=\\\"code\\\" placeholder=\\\"01\\\">\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <button (click)=\\\"addMore()\\\">Thêm nhiều</button>\\r\\n    <div mat-dialog-actions>\\r\\n        <button mat-button (click)=\\\"onNoClick()\\\">Hủy</button>\\r\\n        <button mat-button (click)=\\\"submit()\\\">Thêm</button>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <button id=\\\"addNew\\\" mat-raised-button (click)=\\\"openDialog()\\\">Thêm mới</button>\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-header card-header-primary\\\">\\r\\n                <h4 class=\\\"card-title\\\">Dòng sản phẩm</h4>\\r\\n            </div>\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <table mat-table [dataSource]=\\\"pLSv.productLine$ | async\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n                    <!-- Position Column -->\\r\\n                    <ng-container matColumnDef=\\\"position\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> No. </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as i\\\"> {{i + 1}} </td>\\r\\n                    </ng-container>\\r\\n                \\r\\n                    <!-- Code Column -->\\r\\n                    <ng-container matColumnDef=\\\"code\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Mã dòng sản phẩm </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element;index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index==editIndex;else editInput\\\">\\r\\n                                <input type=\\\"text\\\" [(ngModel)]=\\\"currentProductLine.code\\\" />\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element.code}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                \\r\\n                    <!-- Name Column -->\\r\\n                    <ng-container matColumnDef=\\\"name\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Tên dòng sản phẩm </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                                <input type=\\\"text\\\" [(ngModel)]=\\\"currentProductLine.name\\\" />\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element.name}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"fields\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Tên ngành</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <mat-select [(ngModel)]=\\\"element.f_id\\\">\\r\\n                                        <mat-option *ngFor=\\\"let f of pLSv.fields$ | async\\\" [value]=\\\"f.id\\\">\\r\\n                                            {{ f.name }}\\r\\n                                        </mat-option>\\r\\n                                    </mat-select>\\r\\n                                </mat-form-field>\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element?.field?.name}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <!-- End Fields Column -->\\r\\n                \\r\\n                    <ng-container matColumnDef=\\\"delete\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Thao tác </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else acceptButton\\\">\\r\\n                                <button mat-raised-button (click)=\\\"updateProduct()\\\">Xác nhận</button>\\r\\n                                <button mat-raised-button (click)=\\\"cancelEdit()\\\">Hủy</button>\\r\\n                            </ng-container>\\r\\n                            <ng-template #acceptButton>\\r\\n                                <ng-container *ngIf=\\\"editIndex == null\\\">\\r\\n                                    <button mat-raised-button (click)=\\\"toggleEdit(index, element)\\\">Sửa</button>\\r\\n                                    <button mat-raised-button (click)=\\\"deleteProductLine(element.id)\\\">Xóa</button>\\r\\n                                </ng-container>\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                </table>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJBZG1pbi9zcmMvYXBwL21vZHVsZXMvcHJvZHVjdC1saW5lL2RpYWxvZy9kaWFsb2cuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ProductLine } from '../../../models/product-line';\r\nimport { ProductLineService } from '../services/product-line.service';\r\n\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss']\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  constructor(public dialogRef: MatDialogRef<DialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ProductLine,\r\n    private pLSv: ProductLineService, private formBuilder: FormBuilder\r\n  ) { }\r\n  field_id: any = null;\r\n  onNoClick(): void {\r\n    this.dialogRef.close({\r\n\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = this.formBuilder.group({\r\n      productLines: this.formBuilder.array([])\r\n\r\n    })\r\n    this.addMore();\r\n  }\r\n  get productLinesControl() {\r\n    return this.form.controls.productLines as FormArray;\r\n  }\r\n  addMore() {\r\n    this.productLinesControl.push(this.formBuilder.group({\r\n      name: [''],\r\n      code: ['', Validators.required],\r\n      f_id: ['']\r\n    }))\r\n  }\r\n  submit() {\r\n    const {productLines} = this.form.value;\r\n    const newProductLines = productLines.map(\r\n      e => {\r\n        return {\r\n          ...e,\r\n          f_id: this.field_id\r\n        }\r\n      }\r\n    )\r\n    \r\n    this.pLSv.add(newProductLines);\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJBZG1pbi9zcmMvYXBwL21vZHVsZXMvcHJvZHVjdC1saW5lL3Byb2R1Y3QtbGluZS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ProductLine } from '../../models/product-line';\r\nimport { ProductLineService } from './services/product-line.service';\r\nimport { MatDialog } from '@angular/material';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { ConfirmDialogService } from '../../@lib/services/confirm-dialog.service';\r\n\r\n@Component({\r\n  selector: 'app-product-line',\r\n  templateUrl: './product-line.component.html',\r\n  styleUrls: ['./product-line.component.scss']\r\n})\r\nexport class ProductLineComponent implements OnInit {\r\n  displayedColumns: string[] = ['position', 'code', 'name', 'fields', 'delete']\r\n\r\n  productLine: ProductLine[] = null;\r\n  editIndex = null;\r\n  currentProductLine: ProductLine = null;\r\n  oldProductLine: ProductLine = null;\r\n\r\n  constructor(public pLSv: ProductLineService, public dialog: MatDialog, private confirmDialog: ConfirmDialogService) { }\r\n\r\n  updateProduct() {\r\n    this.pLSv.update(this.currentProductLine).subscribe(\r\n      _ => this.currentProductLine = this.editIndex = null\r\n    )\r\n  }\r\n\r\n  deleteProductLine(id: number) {\r\n    console.log(id);\r\n    this.confirmDialog.show().then(\r\n      res => {\r\n        if (res) {\r\n          this.pLSv.delete(id);\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(DialogComponent, {\r\n      data: { product: this.productLine }\r\n    });\r\n  }\r\n\r\n  cancelEdit() {\r\n    this.currentProductLine.code = this.oldProductLine.code;\r\n    this.currentProductLine.name = this.oldProductLine.name;\r\n    this.editIndex = this.currentProductLine = null;\r\n  }\r\n\r\n  toggleEdit(index: number, productLine: ProductLine) {\r\n    this.editIndex = index;\r\n    this.currentProductLine = productLine;\r\n    this.oldProductLine = { ...productLine };\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.pLSv.productLine$.subscribe(l => {\r\n      this.productLine = l\r\n    })\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProductLineComponent } from './product-line.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {  MatTableModule, MatInputModule, MatTabsModule, MatFormFieldModule, MatDialogModule, MatButtonModule, MatSelectModule, MatSortModule } from '@angular/material';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ProductLineService } from './services/product-line.service';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { LibModule } from '../../@lib/lib.module';\r\n\r\nconst ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProductLineComponent,\r\n    children: []\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [ProductLineComponent, DialogComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(ROUTES),\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatSortModule,\r\n    LibModule\r\n  ],\r\n  providers:[ProductLineService],\r\n  entryComponents:[DialogComponent]\r\n})\r\nexport class ProductLineModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { ProductLine } from '../../../models/product-line';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Fields } from '../../../models/field';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { ConfirmDialogService } from '../../../@lib/services/confirm-dialog.service';\r\nconst getFieldRelationship = (fieldId: number | string, fieldList: Fields[]) => {\r\n  return fieldList.find(e => e.code == fieldId)\r\n}\r\n\r\n@Injectable()\r\nexport class ProductLineService {\r\n  private productLineSubject = new BehaviorSubject<ProductLine[]>([]);\r\n  private fieldSubject = new BehaviorSubject<Fields[]>([]);\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    this.getList();\r\n  }\r\n  get productLine$() {\r\n    return this.productLineSubject.asObservable();\r\n  }\r\n\r\n  get fields$() {\r\n    return this.fieldSubject.asObservable();\r\n  }\r\n\r\n  add(products: ProductLine[]) {\r\n    this.httpClient.post(\"product-line\", products).subscribe(\r\n      (res: any) => {\r\n        res.map(e=>{\r\n          const newList = [e, ...this.productLineSubject.value];\r\n          this.productLineSubject.next(newList);\r\n        }\r\n        )\r\n      }\r\n    )\r\n  }\r\n  delete(id: number) {\r\n    this.httpClient.delete(\"product-line/\" + id).subscribe(\r\n      (res: any) => {\r\n        const { value } = this.productLineSubject\r\n        const newList = value.filter(e => e.id != id)\r\n        this.productLineSubject.next(newList)\r\n      }\r\n    )\r\n  }\r\n  update(productL: ProductLine) {\r\n    return this.httpClient.patch(\"product-line\", productL).pipe(\r\n      tap(\r\n        (res: any) => {\r\n          const { value } = this.productLineSubject;\r\n\r\n          const index = value.findIndex(e => e.id == productL.id);\r\n\r\n          let newList: any = [...value];\r\n          \r\n          newList[index] = productL;\r\n\r\n          const field = this.fieldSubject.value.find(e => e.id == productL.f_id);\r\n\r\n          productL.field = field;\r\n\r\n\r\n          this.productLineSubject.next(newList);\r\n\r\n        }\r\n      )\r\n    )\r\n  }\r\n  getList() {\r\n    const http = this.httpClient;\r\n    const requests = [\r\n      http.get(\"product-line\"),\r\n      http.get(\"fields\")\r\n    ]\r\n\r\n    forkJoin(requests).subscribe(\r\n      (res: any) => {\r\n        const productLine: ProductLine[] = res[0];\r\n        const fields: Fields[] = res[1];\r\n        this.productLineSubject.next(productLine);\r\n        this.fieldSubject.next(fields);\r\n      }\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"modules-product-line-product-line-module-es5.js"}