{"version":3,"sources":["./src/app/modules/product-line/dialog/dialog.component.html","./src/app/modules/product-line/product-line.component.html","./src/app/modules/product-line/dialog/dialog.component.scss","./src/app/modules/product-line/dialog/dialog.component.ts","./src/app/modules/product-line/product-line.component.scss","./src/app/modules/product-line/product-line.component.ts","./src/app/modules/product-line/product-line.module.ts","./src/app/modules/product-line/services/product-line.service.ts"],"names":[],"mappings":"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","file":"modules-product-line-product-line-module-es2015.js","sourcesContent":["export default \"<form class=\\\"example-form\\\">\\r\\n    <h1 mat-dialog-title>Dòng sản phẩm</h1>\\r\\n    <div mat-dialog-content>\\r\\n        <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n            <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\"></div>\\r\\n            <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-label>Tên ngành</mat-label>\\r\\n                    <mat-select [(ngModel)]=\\\"field_id\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n                        <mat-option *ngFor=\\\"let f of pLSv.fields$ | async\\\" [value]=\\\"f.id\\\">\\r\\n                            {{ f.name}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"30\\\" fxFlex.xs=\\\"30\\\"></div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div mat-dialog-content>\\r\\n        <div [formGroup]=\\\"form\\\">\\r\\n            <div formArrayName=\\\"productLines\\\" *ngFor=\\\"let control of productLinesControl.controls;index as i\\\">\\r\\n                <form class=\\\"example-form\\\" [formGroupName]=\\\"i\\\">\\r\\n                    <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n                        <div fxFlex=\\\"50\\\" fxFlex.xs=\\\"50\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-label>Tên dòng sản phẩm</mat-label>\\r\\n                                <input matInput formControlName=\\\"name\\\" placeholder=\\\"Thực phẩm\\\">\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div fxFlex=\\\"50\\\" fxFlex.xs=\\\"50\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-label>Mã dòng sản phẩm</mat-label>\\r\\n                                <input matInput formControlName=\\\"code\\\" placeholder=\\\"01\\\">\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <button (click)=\\\"addMore()\\\">Thêm nhiều</button>\\r\\n    <div mat-dialog-actions>\\r\\n        <button mat-button (click)=\\\"onNoClick()\\\">Hủy</button>\\r\\n        <button mat-button (click)=\\\"submit()\\\">Thêm</button>\\r\\n    </div>\\r\\n</form>\"","export default \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <button id=\\\"addNew\\\" mat-raised-button (click)=\\\"openDialog()\\\">Thêm mới</button>\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-header card-header-primary\\\">\\r\\n                <h4 class=\\\"card-title\\\">Dòng sản phẩm</h4>\\r\\n            </div>\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <table mat-table [dataSource]=\\\"pLSv.productLine$ | async\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n                    <!-- Position Column -->\\r\\n                    <ng-container matColumnDef=\\\"position\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> No. </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as i\\\"> {{i + 1}} </td>\\r\\n                    </ng-container>\\r\\n                \\r\\n                    <!-- Code Column -->\\r\\n                    <ng-container matColumnDef=\\\"code\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Mã dòng sản phẩm </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element;index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index==editIndex;else editInput\\\">\\r\\n                                <input type=\\\"text\\\" [(ngModel)]=\\\"currentProductLine.code\\\" />\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element.code}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                \\r\\n                    <!-- Name Column -->\\r\\n                    <ng-container matColumnDef=\\\"name\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Tên dòng sản phẩm </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                                <input type=\\\"text\\\" [(ngModel)]=\\\"currentProductLine.name\\\" />\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element.name}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"fields\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Tên ngành</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <mat-select [(ngModel)]=\\\"element.f_id\\\">\\r\\n                                        <mat-option *ngFor=\\\"let f of pLSv.fields$ | async\\\" [value]=\\\"f.id\\\">\\r\\n                                            {{ f.name }}\\r\\n                                        </mat-option>\\r\\n                                    </mat-select>\\r\\n                                </mat-form-field>\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element?.field?.name}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <!-- End Fields Column -->\\r\\n                \\r\\n                    <ng-container matColumnDef=\\\"delete\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Thao tác </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else acceptButton\\\">\\r\\n                                <button mat-raised-button (click)=\\\"updateProduct()\\\">Xác nhận</button>\\r\\n                                <button mat-raised-button (click)=\\\"cancelEdit()\\\">Hủy</button>\\r\\n                            </ng-container>\\r\\n                            <ng-template #acceptButton>\\r\\n                                <ng-container *ngIf=\\\"editIndex == null\\\">\\r\\n                                    <button mat-raised-button (click)=\\\"toggleEdit(index, element)\\\">Sửa</button>\\r\\n                                    <button mat-raised-button (click)=\\\"deleteProductLine(element.id)\\\">Xóa</button>\\r\\n                                </ng-container>\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                </table>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJBZG1pbi9zcmMvYXBwL21vZHVsZXMvcHJvZHVjdC1saW5lL2RpYWxvZy9kaWFsb2cuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ProductLine } from '../../../models/product-line';\r\nimport { ProductLineService } from '../services/product-line.service';\r\n\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss']\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  constructor(public dialogRef: MatDialogRef<DialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: ProductLine,\r\n    private pLSv: ProductLineService, private formBuilder: FormBuilder\r\n  ) { }\r\n  field_id: any = null;\r\n  onNoClick(): void {\r\n    this.dialogRef.close({\r\n\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form = this.formBuilder.group({\r\n      productLines: this.formBuilder.array([])\r\n\r\n    })\r\n    this.addMore();\r\n  }\r\n  get productLinesControl() {\r\n    return this.form.controls.productLines as FormArray;\r\n  }\r\n  addMore() {\r\n    this.productLinesControl.push(this.formBuilder.group({\r\n      name: [''],\r\n      code: ['', Validators.required],\r\n      f_id: ['']\r\n    }))\r\n  }\r\n  submit() {\r\n    const {productLines} = this.form.value;\r\n    const newProductLines = productLines.map(\r\n      e => {\r\n        return {\r\n          ...e,\r\n          f_id: this.field_id\r\n        }\r\n      }\r\n    )\r\n    \r\n    this.pLSv.add(newProductLines);\r\n    this.dialogRef.close();\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJBZG1pbi9zcmMvYXBwL21vZHVsZXMvcHJvZHVjdC1saW5lL3Byb2R1Y3QtbGluZS5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ProductLine } from '../../models/product-line';\r\nimport { ProductLineService } from './services/product-line.service';\r\nimport { MatDialog } from '@angular/material';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { ConfirmDialogService } from '../../@lib/services/confirm-dialog.service';\r\n\r\n@Component({\r\n  selector: 'app-product-line',\r\n  templateUrl: './product-line.component.html',\r\n  styleUrls: ['./product-line.component.scss']\r\n})\r\nexport class ProductLineComponent implements OnInit {\r\n  displayedColumns: string[] = ['position', 'code', 'name', 'fields', 'delete']\r\n\r\n  productLine: ProductLine[] = null;\r\n  editIndex = null;\r\n  currentProductLine: ProductLine = null;\r\n  oldProductLine: ProductLine = null;\r\n\r\n  constructor(public pLSv: ProductLineService, public dialog: MatDialog, private confirmDialog: ConfirmDialogService) { }\r\n\r\n  updateProduct() {\r\n    this.pLSv.update(this.currentProductLine).subscribe(\r\n      _ => this.currentProductLine = this.editIndex = null\r\n    )\r\n  }\r\n\r\n  deleteProductLine(id: number) {\r\n    console.log(id);\r\n    this.confirmDialog.show().then(\r\n      res => {\r\n        if (res) {\r\n          this.pLSv.delete(id);\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(DialogComponent, {\r\n      data: { product: this.productLine }\r\n    });\r\n  }\r\n\r\n  cancelEdit() {\r\n    this.currentProductLine.code = this.oldProductLine.code;\r\n    this.currentProductLine.name = this.oldProductLine.name;\r\n    this.editIndex = this.currentProductLine = null;\r\n  }\r\n\r\n  toggleEdit(index: number, productLine: ProductLine) {\r\n    this.editIndex = index;\r\n    this.currentProductLine = productLine;\r\n    this.oldProductLine = { ...productLine };\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.pLSv.productLine$.subscribe(l => {\r\n      this.productLine = l\r\n    })\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProductLineComponent } from './product-line.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {  MatTableModule, MatInputModule, MatTabsModule, MatFormFieldModule, MatDialogModule, MatButtonModule, MatSelectModule, MatSortModule } from '@angular/material';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { ProductLineService } from './services/product-line.service';\r\nimport { DialogComponent } from './dialog/dialog.component';\r\nimport { LibModule } from '../../@lib/lib.module';\r\n\r\nconst ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProductLineComponent,\r\n    children: []\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [ProductLineComponent, DialogComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(ROUTES),\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatSortModule,\r\n    LibModule\r\n  ],\r\n  providers:[ProductLineService],\r\n  entryComponents:[DialogComponent]\r\n})\r\nexport class ProductLineModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { ProductLine } from '../../../models/product-line';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Fields } from '../../../models/field';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { ConfirmDialogService } from '../../../@lib/services/confirm-dialog.service';\r\nconst getFieldRelationship = (fieldId: number | string, fieldList: Fields[]) => {\r\n  return fieldList.find(e => e.code == fieldId)\r\n}\r\n\r\n@Injectable()\r\nexport class ProductLineService {\r\n  private productLineSubject = new BehaviorSubject<ProductLine[]>([]);\r\n  private fieldSubject = new BehaviorSubject<Fields[]>([]);\r\n\r\n  constructor(private httpClient: HttpClient) {\r\n    this.getList();\r\n  }\r\n  get productLine$() {\r\n    return this.productLineSubject.asObservable();\r\n  }\r\n\r\n  get fields$() {\r\n    return this.fieldSubject.asObservable();\r\n  }\r\n\r\n  add(products: ProductLine[]) {\r\n    this.httpClient.post(\"product-line\", products).subscribe(\r\n      (res: any) => {\r\n        res.map(e=>{\r\n          const newList = [e, ...this.productLineSubject.value];\r\n          this.productLineSubject.next(newList);\r\n        }\r\n        )\r\n      }\r\n    )\r\n  }\r\n  delete(id: number) {\r\n    this.httpClient.delete(\"product-line/\" + id).subscribe(\r\n      (res: any) => {\r\n        const { value } = this.productLineSubject\r\n        const newList = value.filter(e => e.id != id)\r\n        this.productLineSubject.next(newList)\r\n      }\r\n    )\r\n  }\r\n  update(productL: ProductLine) {\r\n    return this.httpClient.patch(\"product-line\", productL).pipe(\r\n      tap(\r\n        (res: any) => {\r\n          const { value } = this.productLineSubject;\r\n\r\n          const index = value.findIndex(e => e.id == productL.id);\r\n\r\n          let newList: any = [...value];\r\n          \r\n          newList[index] = productL;\r\n\r\n          const field = this.fieldSubject.value.find(e => e.id == productL.f_id);\r\n\r\n          productL.field = field;\r\n\r\n\r\n          this.productLineSubject.next(newList);\r\n\r\n        }\r\n      )\r\n    )\r\n  }\r\n  getList() {\r\n    const http = this.httpClient;\r\n    const requests = [\r\n      http.get(\"product-line\"),\r\n      http.get(\"fields\")\r\n    ]\r\n\r\n    forkJoin(requests).subscribe(\r\n      (res: any) => {\r\n        const productLine: ProductLine[] = res[0];\r\n        const fields: Fields[] = res[1];\r\n        this.productLineSubject.next(productLine);\r\n        this.fieldSubject.next(fields);\r\n      }\r\n    )\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}