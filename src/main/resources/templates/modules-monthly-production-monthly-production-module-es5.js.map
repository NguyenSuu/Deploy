{"version":3,"sources":["src/app/modules/monthly-production/dialog-mp/dialog-mp.component.html","src/app/modules/monthly-production/monthly-production.component.html","src/app/modules/monthly-production/dialog-mp/dialog-mp.component.scss","src/app/modules/monthly-production/dialog-mp/dialog-mp.component.ts","src/app/modules/monthly-production/monthly-production.component.scss","src/app/modules/monthly-production/monthly-production.component.ts","src/app/modules/monthly-production/monthly-production.module.ts","src/app/modules/monthly-production/services/monthly-production.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<form class=\\\"example-form\\\">\\r\\n    <h1 mat-dialog-title>Số liệu sản xuất theo tháng</h1>\\r\\n    <div mat-dialog-content>\\r\\n        <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n           \\r\\n            <div fxFlex=\\\"40\\\" fxFlex.xs=\\\"40\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-label>Năm</mat-label>\\r\\n                    <input matInput [(ngModel)]=\\\"year\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n            <div fxFlex=\\\"10\\\" fxFlex.xs=\\\"10\\\"></div>\\r\\n            <div fxFlex=\\\"40\\\" fxFlex.xs=\\\"40\\\">\\r\\n                <mat-form-field>\\r\\n                    <mat-label>Tháng</mat-label>\\r\\n                    <mat-select  [(ngModel)]=\\\"month_value\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\r\\n                        <mat-option *ngFor=\\\"let m of month\\\" [value]=\\\"m\\\">\\r\\n                            {{m}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                </mat-form-field>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div mat-dialog-content>\\r\\n        <div [formGroup]=\\\"form\\\">\\r\\n            <div formArrayName=\\\"mProduction\\\" *ngFor=\\\"let control of mProductionControl.controls;index as i\\\">\\r\\n                <form class=\\\"example-form\\\" [formGroupName]=\\\"i\\\">\\r\\n                    <div class=\\\"content\\\" fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" fxFlexFill>\\r\\n                        <div fxFlex=\\\"50\\\" fxFlex.xs=\\\"50\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-label> Tên sản phẩm</mat-label>\\r\\n                                <mat-select formControlName=\\\"p_id\\\">\\r\\n                                    <mat-option *ngFor=\\\"let p of mPSV.products$ | async\\\" [value]=\\\"p.id\\\">\\r\\n                                        {{p.name}}\\r\\n                                    </mat-option>\\r\\n                                </mat-select>\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                        <div fxFlex=\\\"50\\\" fxFlex.xs=\\\"50\\\">\\r\\n                            <mat-form-field>\\r\\n                                <mat-label>Số liệu</mat-label>\\r\\n                                <input matInput formControlName=\\\"data\\\">\\r\\n                            </mat-form-field>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <button (click)=\\\"addMore()\\\">Thêm nhiều</button>\\r\\n    <div mat-dialog-actions>\\r\\n        <button mat-button (click)=\\\"onNoClick()\\\">Hủy</button>\\r\\n        <button mat-button (click)=\\\"submit()\\\">Thêm</button>\\r\\n    </div>\\r\\n</form>\"","export default \"        <button id=\\\"addNew\\\" mat-raised-button (click)=\\\"openDialog()\\\">Thêm mới</button>\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-header card-header-primary\\\">\\r\\n                <h4 class=\\\"card-title\\\">Số liệu sản xuất theo tháng</h4>\\r\\n            </div>\\r\\n            <div class=\\\"card-body\\\">\\r\\n                <table mat-table [dataSource]=\\\"monthlyProduction\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n                    <!-- Position Column -->\\r\\n                    <ng-container matColumnDef=\\\"position\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> No. </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as i\\\"> {{i + 1}} </td>\\r\\n                    </ng-container>\\r\\n\\r\\n                    <!-- Code Column -->\\r\\n                    <ng-container matColumnDef=\\\"month\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Tháng </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element;index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index==editIndex;else editInput\\\">\\r\\n                                <input type=\\\"text\\\" [(ngModel)]=\\\"currentMonthlyProduction.month\\\" />\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element.month}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"years\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef>Năm </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                                <input type=\\\"text\\\" [(ngModel)]=\\\"currentMonthlyProduction.year\\\" />\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element.year}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"product_id\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Tên sản phẩm</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <mat-select [(ngModel)]=\\\"element.p_id\\\">\\r\\n                                        <mat-option *ngFor=\\\"let p of mPSV.products$ | async\\\" [value]=\\\"p.id\\\">\\r\\n                                            {{p.name}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-select>\\r\\n                                </mat-form-field>\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element?.products?.name}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"productLine_id\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Tên loại sản phẩm</th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                                <mat-form-field>\\r\\n                                    <mat-select [(ngModel)]=\\\"element.pL_id\\\">\\r\\n                                        <mat-option *ngFor=\\\"let pL of mPSV.productLine$ | async\\\" [value]=\\\"pL.id\\\">\\r\\n                                            {{ pL.name}}\\r\\n                                        </mat-option>\\r\\n                                    </mat-select>\\r\\n                                </mat-form-field>\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element?.products?.productLine?.name}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"data\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Số liệu </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else editInput\\\">\\r\\n                                <input type=\\\"text\\\" [(ngModel)]=\\\"currentMonthlyProduction.data\\\" />\\r\\n                            </ng-container>\\r\\n                            <ng-template #editInput>\\r\\n                                {{element.data}}\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <ng-container matColumnDef=\\\"delete\\\">\\r\\n                        <th mat-header-cell *matHeaderCellDef> Thao tác </th>\\r\\n                        <td mat-cell *matCellDef=\\\"let element; index as index\\\">\\r\\n                            <ng-container *ngIf=\\\"index == editIndex; else acceptButton\\\">\\r\\n                                <button mat-raised-button (click)=\\\"updateData()\\\">Xác nhận</button>\\r\\n                                <button mat-raised-button (click)=\\\"cancelEdit()\\\">Hủy</button>\\r\\n                            </ng-container>\\r\\n                            <ng-template #acceptButton>\\r\\n                                <ng-container *ngIf=\\\"editIndex == null\\\">\\r\\n                                    <button mat-raised-button (click)=\\\"toggleEdit(index, element)\\\">Sửa</button>\\r\\n                                    <button mat-raised-button (click)=\\\"deleteData(element.id)\\\">Xóa</button>\\r\\n                                </ng-container>\\r\\n                            </ng-template>\\r\\n                        </td>\\r\\n                    </ng-container>\\r\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                </table>\\r\\n            </div>\\r\\n        </div>\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJBZG1pbi9zcmMvYXBwL21vZHVsZXMvbW9udGhseS1wcm9kdWN0aW9uL2RpYWxvZy1tcC9kaWFsb2ctbXAuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { MonthlyProduction } from '../../../models/monthly-production';\r\nimport { MonthlyProductionService } from '../services/monthly-production.service';\r\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-dialog-mp',\r\n  templateUrl: './dialog-mp.component.html',\r\n  styleUrls: ['./dialog-mp.component.scss']\r\n})\r\nexport class DialogMPComponent implements OnInit {\r\n  form: FormGroup\r\n  constructor(public dialogRef: MatDialogRef<DialogMPComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: MonthlyProduction,\r\n    public mPSV: MonthlyProductionService, private formBuilder: FormBuilder\r\n  ) { }\r\n  month:any=[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"];\r\n  year:any=null;\r\n  month_value:any=null;\r\n  ngOnInit() {\r\n    this.form = this.formBuilder.group({\r\n      mProduction:this.formBuilder.array([])\r\n    })\r\n    this.addMore();\r\n    // this.mPSV.monthlyProductionsSubject.subscribe(\r\n    //   (res: any) => {\r\n    //     const {productCode, typeDataCode} = res[0]\r\n    //     this.form.patchValue({\r\n    //       productCode,\r\n    //       typeDataCode\r\n    //     })\r\n    //   }\r\n    // )\r\n  }\r\n  get mProductionControl(){\r\n    return this.form.controls.mProduction as FormArray;\r\n  }\r\n  addMore(){\r\n    this.mProductionControl.push(this.formBuilder.group({\r\n      month: [''],\r\n      year: [''],\r\n      data: [''],\r\n      p_id:[''],\r\n\r\n    }))\r\n  }\r\n  onNoClick() {\r\n    this.dialogRef.close();\r\n  }\r\n  submit() {\r\n    const {mProduction} = this.form.value;\r\n    const newMProduction=mProduction.map(\r\n      e =>{\r\n        return{\r\n          ...e,\r\n          month:this.month_value,\r\n          year:this.year\r\n        }\r\n      \r\n    })\r\n    this.mPSV.add(newMProduction);\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","export default \":host {\\n  padding: 1rem;\\n  display: block;\\n}\\n\\ntable {\\n  width: 100%;\\n}\\n\\n#addNew {\\n  width: 300px;\\n  height: 50px;\\n  margin: 5px;\\n  background-color: #2020cf;\\n  color: white;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFkbWluL3NyYy9hcHAvbW9kdWxlcy9tb250aGx5LXByb2R1Y3Rpb24vQzpcXFVzZXJzXFxLSU5HXFxEZXNrdG9wXFxFY29ub21pYy1TdGF0aXN0aWNcXGUtc3RhdGlzdGljc1xcVUlcXHByb2plY3RzL0FkbWluXFxzcmNcXGFwcFxcbW9kdWxlc1xcbW9udGhseS1wcm9kdWN0aW9uXFxtb250aGx5LXByb2R1Y3Rpb24uY29tcG9uZW50LnNjc3MiLCJBZG1pbi9zcmMvYXBwL21vZHVsZXMvbW9udGhseS1wcm9kdWN0aW9uL21vbnRobHktcHJvZHVjdGlvbi5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxjQUFBO0FDQ0o7O0FERUE7RUFDSSxXQUFBO0FDQ0o7O0FEQ0E7RUFDSSxZQUFBO0VBQ0EsWUFBQTtFQUNBLFdBQUE7RUFDQSx5QkFBQTtFQUNBLFlBQUE7QUNFSiIsImZpbGUiOiJBZG1pbi9zcmMvYXBwL21vZHVsZXMvbW9udGhseS1wcm9kdWN0aW9uL21vbnRobHktcHJvZHVjdGlvbi5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIjpob3N0IHtcclxuICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxufVxyXG5cclxudGFibGV7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG4jYWRkTmV3e1xyXG4gICAgd2lkdGg6IDMwMHB4O1xyXG4gICAgaGVpZ2h0OiA1MHB4O1xyXG4gICAgbWFyZ2luOjVweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigzMiwgMzIsIDIwNyk7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn0iLCI6aG9zdCB7XG4gIHBhZGRpbmc6IDFyZW07XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG50YWJsZSB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4jYWRkTmV3IHtcbiAgd2lkdGg6IDMwMHB4O1xuICBoZWlnaHQ6IDUwcHg7XG4gIG1hcmdpbjogNXB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjAyMGNmO1xuICBjb2xvcjogd2hpdGU7XG59Il19 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { MonthlyProduction } from '../../models/monthly-production';\r\nimport { MatDialog } from '@angular/material';\r\nimport { DialogMPComponent } from './dialog-mp/dialog-mp.component';\r\nimport { MonthlyProductionService } from './services/monthly-production.service';\r\nimport { ConfirmDialogService } from '../../@lib/services/confirm-dialog.service';\r\n\r\n@Component({\r\n  selector: 'app-monthly-production',\r\n  templateUrl: './monthly-production.component.html',\r\n  styleUrls: ['./monthly-production.component.scss']\r\n})\r\n\r\nexport class MonthlyProductionComponent implements OnInit {\r\n  displayedColumns: string[] = [\"position\", \"month\", \"years\", \"product_id\", \"productLine_id\", \"data\", \"delete\"]\r\n  monthlyProduction: MonthlyProduction[] = null;\r\n  currentMonthlyProduction: MonthlyProduction = null;\r\n  oldMonthlyProduction: MonthlyProduction = null;\r\n  editIndex = null;\r\n  constructor(private dialog: MatDialog, public mPSV: MonthlyProductionService, private confirmDialog: ConfirmDialogService) { }\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(DialogMPComponent, {\r\n      data: { monthlyProduction: this.monthlyProduction }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.mPSV.monthlyProduction$.subscribe(l => this.monthlyProduction = l)\r\n  }\r\n  toggleEdit(index: number, monthlyProduction: MonthlyProduction) {\r\n    this.currentMonthlyProduction = monthlyProduction;\r\n    this.editIndex = index;\r\n    this.oldMonthlyProduction = { ...monthlyProduction };\r\n  }\r\n  cancelEdit() {\r\n    this.currentMonthlyProduction.month = this.oldMonthlyProduction.month;\r\n    this.currentMonthlyProduction.year = this.oldMonthlyProduction.year;\r\n    // this.currentMonthlyProduction.productCode = this.oldMonthlyProduction.productCode;\r\n    // this.currentMonthlyProduction.typeDataCode = this.oldMonthlyProduction.typeDataCode;\r\n    this.editIndex = this.currentMonthlyProduction = null;\r\n  }\r\n  updateData() {\r\n    this.mPSV.update(this.currentMonthlyProduction).subscribe(\r\n      _ => this.currentMonthlyProduction = this.editIndex = null\r\n    )\r\n  }\r\n  deleteData(id: number) {\r\n    this.confirmDialog.show().then(\r\n      res => {\r\n        if (res) {\r\n          this.mPSV.delete(id);\r\n        }\r\n      }\r\n    )\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MonthlyProductionComponent } from './monthly-production.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MatTableModule, MatTabsModule, MatInputModule, MatFormFieldModule, MatDialogModule, MatButtonModule, MatSelectModule, MatSortModule } from '@angular/material';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { LibModule } from '../../@lib/lib.module';\r\nimport { MonthlyProductionService } from './services/monthly-production.service';\r\nimport { DialogMPComponent } from './dialog-mp/dialog-mp.component';\r\n\r\nconst ROUTES: Routes = [\r\n  {\r\n    path: '',\r\n    component: MonthlyProductionComponent,\r\n    children: []\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [MonthlyProductionComponent, DialogMPComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(ROUTES),\r\n    MatTableModule,\r\n    MatInputModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    FlexLayoutModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatSortModule,\r\n    LibModule\r\n  ],\r\n  providers:[MonthlyProductionService],\r\n  entryComponents:[DialogMPComponent]\r\n})\r\nexport class MonthlyProductionModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { MonthlyProduction } from '../../../models/monthly-production';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { Products } from '../../../models/product';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { tap, map } from 'rxjs/operators';\r\nimport { ProductLine } from '../../../models/product-line';\r\nconst DOMAIN = \"\"\r\n@Injectable()\r\nexport class MonthlyProductionService {\r\n  monthlyProductionsSubject = new BehaviorSubject<MonthlyProduction[]>([])\r\n  productsSubject = new BehaviorSubject<Products[]>([])\r\n  productLineSubject = new BehaviorSubject<ProductLine[]>([])\r\n  get monthlyProduction$() {\r\n    return this.monthlyProductionsSubject.asObservable()\r\n  }\r\n  get products$() {\r\n    return this.productsSubject.asObservable()\r\n  }\r\n  get productLine$() {\r\n    return this.productLineSubject.asObservable()\r\n  }\r\n  constructor(private http: HttpClient) {\r\n    this.getList()\r\n  }\r\n\r\n  getList() {\r\n    const request = [\r\n      this.http.get(\"monthly-production\"),\r\n      this.http.get(\"products\"),\r\n      this.http.get(\"product-line\")\r\n    ]\r\n    forkJoin(request).subscribe(\r\n      (res: any) => {\r\n        const monthlyProduction: MonthlyProduction[] = res[0];\r\n        const products: Products[] = res[1];\r\n        const productLine: ProductLine[] = res[2];\r\n        this.monthlyProductionsSubject.next(monthlyProduction);\r\n        this.productsSubject.next(products);\r\n        this.productLineSubject.next(productLine)\r\n      }\r\n    )\r\n  }\r\n  add(mProduction: MonthlyProduction[]){\r\n    console.log(mProduction);\r\n  this.http.post(\"monthly-production\", mProduction).subscribe(\r\n    (res: any) => {\r\n      res.map(\r\n        e => {\r\n          const newList = [e, ...this.monthlyProductionsSubject.value]\r\n          this.monthlyProductionsSubject.next(newList)\r\n\r\n        }\r\n      )\r\n    }\r\n  )\r\n}\r\nupdate(monthlyProduction: MonthlyProduction){\r\n  return this.http.patch(\"monthly-production\", monthlyProduction).pipe(\r\n    tap(\r\n      res => {\r\n        const { value } = this.monthlyProductionsSubject\r\n        const index = value.findIndex(e => e.id == monthlyProduction.id)\r\n        const newList = { ...value }\r\n        newList[index] = monthlyProduction\r\n        this.monthlyProductionsSubject.next(newList)\r\n      }\r\n    )\r\n  )\r\n}\r\ndelete (id: number) {\r\n  this.http.delete(\"monthly-production/\" + id).subscribe(\r\n    res => {\r\n      const { value } = this.monthlyProductionsSubject\r\n      const newList = value.filter(e => e.id != id)\r\n      this.monthlyProductionsSubject.next(newList)\r\n    }\r\n  )\r\n}\r\n}\r\n"],"sourceRoot":"webpack:///","file":"modules-monthly-production-monthly-production-module-es5.js"}